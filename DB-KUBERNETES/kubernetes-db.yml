#-------------------POSTGRES-------------------------
# Volumen persistente 
apiVersion: v1
kind: PersistentVolume
metadata:
  name: pv-postgres-vol1
  namespace: juan-namespace
spec: #Configuración de lo que va a contruir a nivel de disco
  storageClassName: postgres
  capacity:
    storage: 10Gi # Capacidad
  accessModes:
    - ReadWriteOnce # Lectura y escritura
  hostPath:
    path: "/mnt/postgres-vol1" # Lugar donde guardara los datos
---

#Storage Class
apiVersion: storage.k8s.io/v1
kind: StorageClass
metadata:
  name: postgres
  namespace: juan-namespace
provisioner: kubernetes.io/no-provisioner # no-provisioner -> Entorno de de infraestructura local
reclaimPolicy: Retain # Que realizara con mis datos 
volumeBindingMode: WaitForFirstConsumer
---

#PersistentVolumeClaim
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: pvc-postgres
  namespace: juan-namespace
spec:
  storageClassName: postgres
  accessModes:
    - ReadWriteOnce
  resources: #Configuración de lo que va a reclamar
    requests:
      storage: 5Gi
---

#CONFIGMAP POSTGRES
kind: ConfigMap 
apiVersion: v1 
metadata:
  name: postgres-configmap 
  namespace: juan-namespace
  labels:
    app: postgres-server
data: # Configuration values can be set as key-value properties
  POSTGRES_PASSWORD: "1234"
  POSTGRES_USER: "juan"
  POSTGRES_DB: "juandb"
---

#DEPLOYMENT POSTGRESQL
apiVersion: apps/v1
kind: Deployment
metadata:
  name: postgres-deployment
  namespace: juan-namespace
  labels:
    app: postgres-server
spec:
  selector:
    matchLabels:
      app: postgres-server
  replicas: 1
  template:
    metadata:
      labels:
        app: postgres-server
    spec:
      containers:
      - image: postgres:11  #docker pull image
        name: postgres-db1
        ports:
        - containerPort: 5432
          protocol: TCP
        volumeMounts:
        - mountPath: /var/lib/postgresql/data
          name: postgres-db-volume1
        env:
          - name: POSTGRES_PASSWORD #Definición de la variable de entorno
            valueFrom:
              configMapKeyRef:
                name: postgres-configmap #referencia del nombre del configMap
                key: POSTGRES_PASSWORD #hacer referencia a la variable de entorno donde guarda el valor
          - name: POSTGRES_USER #Definición de la variable de entorno
            valueFrom:
              configMapKeyRef:
                name: postgres-configmap #referencia del nombre del configMap
                key: POSTGRES_USER #hacer referencia a la variable de entorno donde guarda el valor
          - name: POSTGRES_DB #Definición de la variable de entorno
            valueFrom:
              configMapKeyRef:
                name: postgres-configmap #referencia del nombre del configMap
                key: POSTGRES_DB #hacer referencia a la variable de entorno donde guarda el valor
      volumes:
      - name: postgres-db-volume1
        persistentVolumeClaim:
           claimName: pvc-postgres
---

#SERVICE POSTGRESQL
apiVersion: v1
kind: Service
metadata:
  name: postgres-service
  namespace: juan-namespace
  labels:
    app: postgres-server
spec:
  selector:
    app: postgres-server #hacer referencia a la app de algun pod
  ports:  
      # By default and for convenience, the `targetPort` is set to the same value as the `port` field.
    - port: 5300 #puerto que se desea conectar
      targetPort: 5432 #puerto por defecto de la app
      protocol: TCP #protocolo que se utilizara
  type: LoadBalancer #el tipo de servicio
---
#-----------------REDIS------------------------------
#PERSISTENT VOLUME REDIS
apiVersion: v1
kind: PersistentVolume
metadata:
  name: pv-redis-vol1
  namespace: juan-namespace
spec: #Configuración de lo que va a contruir a nivel de disco
  storageClassName: redis
  capacity:
    storage: 10Gi # Capacidad
  accessModes:
    - ReadWriteOnce # Lectura y escritura
  hostPath:
    path: "/mnt/redis-vol1" # Lugar donde guardara los datos
---

#STORAGE CLASS REDIS
apiVersion: storage.k8s.io/v1
kind: StorageClass
metadata:
  name: redis
  namespace: juan-namespace
provisioner: kubernetes.io/no-provisioner # no-provisioner -> Entorno de de infraestructura local
reclaimPolicy: Retain # Que realizara con mis datos 
volumeBindingMode: WaitForFirstConsumer
---

#PERSISTENT VOLUME CLAIM REDIS
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: pvc-redis
  namespace: juan-namespace
  labels:
    app: redis-server
spec:
  storageClassName: redis
  accessModes:
    - ReadWriteOnce
  resources: #Configuración de lo que va a reclamar
    requests:
      storage: 5Gi
---

#CONFIGMAP REDIS
apiVersion: v1 
kind: ConfigMap 
metadata:
  name: redis-configmap 
  namespace: juan-namespace
  labels:
    app: redis-server
data: # Configuration values can be set as key-value properties
  REDIS_PASSWORD: "1234"
  REDIS_DB: "juandb"
---

#DEPLOY REDIS
apiVersion: apps/v1
kind: Deployment
metadata:
  name: redis-deployment
  namespace: juan-namespace
  labels:
    app: redis-server
spec:
  selector:
    matchLabels:
      app: redis-server
  replicas: 1
  template:
    metadata:
      labels:
        app: redis-server
    spec:
      containers:
      - image: redis:latest  #docker pull image
        name: redis-db1
        ports:
        - containerPort: 6379
          protocol: TCP
        volumeMounts:
        - mountPath: /data
          name: redis-db-volume1
        env:
          - name: REDIS_PASSWORD
            valueFrom:
              configMapKeyRef:
                name: redis-configmap
                key: REDIS_PASSWORD   
          - name: REDIS_DB
            valueFrom:
              configMapKeyRef:
                name: redis-configmap
                key: REDIS_DB
      volumes:
      - name: redis-db-volume1
        persistentVolumeClaim:
           claimName: pvc-redis
---

#SERVICE REDIS
apiVersion: v1
kind: Service
metadata:
  name: redis-service
  namespace: juan-namespace
  labels:
    app: redis-server
spec:
  selector:
    app: redis-server #hacer referencia a la app de algun pod
  ports:  
      # By default and for convenience, the `targetPort` is set to the same value as the `port` field.
    - port: 5301 #puerto que se desea conectar
      targetPort: 6379 #puerto por defecto de la app
      protocol: TCP #protocolo que se utilizara
  type: LoadBalancer #el tipo de servicio
---

#-----------------MONGODB-------------------------
#PERSISTENT VOLUME MONGO
apiVersion: v1
kind: PersistentVolume
metadata:
  name: pv-mongo-vol1
  namespace: juan-namespace
spec: #Configuración de lo que va a contruir a nivel de disco
  storageClassName: mongodb
  capacity:
    storage: 10Gi # Capacidad
  accessModes:
    - ReadWriteOnce # Lectura y escritura
  hostPath:
    path: "/mnt/mongo-vol1" # Lugar donde guardara los datos
---

#STORAGE CLASS MONGODB
apiVersion: storage.k8s.io/v1
kind: StorageClass
metadata:
  name: mongodb
  namespace: juan-namespace
provisioner: kubernetes.io/no-provisioner # no-provisioner -> Entorno de de infraestructura local
reclaimPolicy: Retain # Que realizara con mis datos 
volumeBindingMode: WaitForFirstConsumer
---

#PERSISTENT VOLUME CLAIM MONGODB
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: pvc-mongodb
  namespace: juan-namespace
  labels:
    app: mongo-server
spec:
  storageClassName: mongodb
  accessModes:
    - ReadWriteOnce
  resources: #Configuración de lo que va a reclamar
    requests:
      storage: 5Gi
---

#CONFIGMAP MONGO
kind: ConfigMap 
apiVersion: v1 
metadata:
  name: mongo-configmap 
  namespace: juan-namespace
  labels:
    app: mongo-server
data: # Configuration values can be set as key-value properties
  MONGO_PASSWORD: "1234"
  MONGO_USER: "juan"
  MONGO_DB: "juandb"
---

#DEPLOY MONGODB
apiVersion: apps/v1
kind: Deployment
metadata:
  name: mongo-deployment
  namespace: juan-namespace
  labels:
    app: mongo-server
spec:
  selector:
    matchLabels:
      app: mongo-server
  replicas: 1
  template:
    metadata:
      labels:
        app: mongo-server
    spec:
      containers:
      - image: mongo:latest  #docker pull image
        name: mongo-db1
        ports:
        - containerPort: 27017
          protocol: TCP
        volumeMounts:
        - mountPath: /data/db
          name: mongo-db-volume1
        env:
          - name: MONGO_INITDB_DATABASE  #Definición de la variable de entorno
            valueFrom:
              configMapKeyRef:
                name: mongo-configmap  #referencia del nombre del configMap
                key: MONGO_DB  #hacer referencia a la variable de entorno donde guarda el valor
          - name: MONGO_INITDB_ROOT_PASSWORD  #Definición de la variable de entorno
            valueFrom:
              configMapKeyRef:
                name: mongo-configmap #referencia del nombre del configMap
                key: MONGO_PASSWORD #hacer referencia a la variable de entorno donde guarda el valor
          - name: MONGO_INITDB_ROOT_USERNAME #Definición de la variable de entorno
            valueFrom:
              configMapKeyRef:
                name: mongo-configmap #referencia del nombre del configMap
                key: MONGO_USER #hacer referencia a la variable de entorno donde guarda el valor
      volumes:
      - name: mongo-db-volume1
        persistentVolumeClaim:
           claimName: pvc-mongodb
---

#SERVICE MONGODB
apiVersion: v1
kind: Service
metadata:
  name: mongo-service
  namespace: juan-namespace
  labels:
    app: mongo-server
spec:
  selector:
    app: mongo-server #hacer referencia a la app de algun pod
  ports:  
      # By default and for convenience, the `targetPort` is set to the same value as the `port` field.
    - port: 5302 #puerto que se desea conectar
      targetPort: 27017 #puerto por defecto de la app
      protocol: TCP #protocolo que se utilizara
  type: LoadBalancer #el tipo de servicio
---  
#-----------------MYSQL------------------------------
#PERSISTENT VOLUME MYSQL
apiVersion: v1
kind: PersistentVolume
metadata:
  name: pv-mysql-vol1
  namespace: juan-namespace
spec: #Configuración de lo que va a contruir a nivel de disco
  storageClassName: mysql
  capacity:
    storage: 10Gi # Capacidad
  accessModes:
    - ReadWriteOnce # Lectura y escritura
  hostPath:
    path: "/mnt/mysql-vol1" # Lugar donde guardara los datos
---

#STORAGE CLASS REDIS
apiVersion: storage.k8s.io/v1
kind: StorageClass
metadata:
  name: mysql
  namespace: juan-namespace
provisioner: kubernetes.io/no-provisioner # no-provisioner -> Entorno de de infraestructura local
reclaimPolicy: Retain # Que realizara con mis datos 
volumeBindingMode: WaitForFirstConsumer
---

#PERSISTENT VOLUME CLAIM REDIS
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: pvc-mysql
  namespace: juan-namespace
  labels:
    app: mysql-server
spec:
  storageClassName: mysql
  accessModes:
    - ReadWriteOnce
  resources: #Configuración de lo que va a reclamar
    requests:
      storage: 5Gi
---
      
#CONFIGMAP REDIS
apiVersion: v1 
kind: ConfigMap 
metadata:
  name: mysql-configmap 
  namespace: juan-namespace
  labels:
    app: mysql-server
data: # Configuration values can be set as key-value properties
  MYSQL_ROOT_PASSWORD: "1234"
  MYSQL_DATABASE: "juandb"

---
#DEPLOY MYSQL
apiVersion: apps/v1
kind: Deployment
metadata:
  name: mysql-deployment
  namespace: juan-namespace
  labels:
    app: mysql-server
spec:
  selector:
    matchLabels:
      app: mysql-server
  replicas: 1
  template:
    metadata:
      labels:
        app: mysql-server
    spec:
      containers:
      - image: mysql:8  #docker pull image
        name: mysql-db1
        ports:
        - containerPort: 3306
          protocol: TCP
        volumeMounts:
        - mountPath: /var/lib/mysql
          name: mysql-db-volume1
        env:
          - name: MYSQL_ROOT_PASSWORD
            valueFrom:
              configMapKeyRef:
                name: mysql-configmap
                key: MYSQL_ROOT_PASSWORD   
          - name: MYSQL_DATABASE
            valueFrom:
              configMapKeyRef:
                name: mysql-configmap
                key: MYSQL_DATABASE
      volumes:
      - name: mysql-db-volume1
        persistentVolumeClaim:
           claimName: pvc-mysql
---

#SERVICE REDIS
apiVersion: v1
kind: Service
metadata:
  name: mysql-service
  namespace: juan-namespace
  labels:
    app: mysql-server
spec:
  selector:
    app: mysql-server #hacer referencia a la app de algun pod
  ports:  
      # By default and for convenience, the `targetPort` is set to the same value as the `port` field.
    - port: 5303 #puerto que se desea conectar
      targetPort: 3306 #puerto por defecto de la app
      protocol: TCP #protocolo que se utilizara
  type: LoadBalancer #el tipo de servicio